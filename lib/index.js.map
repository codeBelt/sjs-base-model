{"version":3,"file":"index.js","sources":["../src/Util.ts","../src/BaseModel.ts","../src/BaseObject.ts"],"sourcesContent":["/**\n * A Utility class that has several static methods to assist in development.\n *\n * @class Util\n * @author Robert S. (www.codeBelt.com)\n * @static\n */\nexport class Util {\n\n    /**\n     * Keeps track of the count for the uniqueId method.\n     *\n     * @property _idCounter\n     * @type {int}\n     * @private\n     * @static\n     */\n    private static _idCounter: number = 0;\n\n    /**\n     * Generates a unique ID. If a prefix is passed in, the value will be appended to it.\n     *\n     * @method uniqueId\n     * @param [prefix] {string} The string value used for the prefix.\n     * @returns {init|string} Returns the unique identifier.\n     * @public\n     * @static\n     * @example\n     *      let property = Util.uniqueId();\n     *      // 1\n     *\n     *      let property = Util.uniqueId('prefixName_');\n     *      // prefixName_1\n     */\n    public static uniqueId(prefix: string = null): any {\n        const id: number = ++Util._idCounter;\n\n        if (prefix != null) {\n            return String(prefix + id);\n        } else {\n            return id;\n        }\n    }\n\n    /**\n     * Removes a list of properties from an object.\n     *\n     * @method deletePropertyFromObject\n     * @param object {Object} The object you want to remove properties from.\n     * @param value {string|Array.<string>} A property name or an array of property names you want to remove from the object.\n     * @returns {any} Returns the object passed in without the removed the properties.\n     * @public\n     * @static\n     * @example\n     *      let obj = { name: 'Robert', gender: 'male', phone: '555-555-5555' }\n     *\n     *      Util.deletePropertyFromObject(obj, ['phone', 'gender']);\n     *\n     *      // { name: 'Robert' }\n     */\n    public static deletePropertyFromObject(object: any, value: string | string[]): any {\n        // If properties is not an array then make it an array object.\n        const propertyNameList: any = (value instanceof Array) ? value : [value];\n\n        Object\n            .keys(object)\n            .forEach((key: string) => {\n                const propertyData: any = object[key];\n\n                if (propertyNameList.includes(key) === true) {\n                    delete object[key];\n                } else if (propertyData instanceof Array) {\n                    propertyData.forEach((item: any) => Util.deletePropertyFromObject(item, propertyNameList));\n                } else if (propertyData instanceof Object) {\n                    Util.deletePropertyFromObject(propertyData, propertyNameList);\n                }\n            });\n\n        return object;\n    }\n\n    /**\n     * Makes a clone of an object.\n     *\n     * @method clone\n     * @param src {Object} The object you to clone.\n     * @param renamePropertyName {(keyName: string) => string} Optional function to rename property names\n     * @returns {any} Returns a clone object of the one passed in.\n     * @public\n     * @static\n     * @example\n     *      let cloneOfObject = Util.clone(obj);\n     */\n    public static clone(src: any, renamePropertyName: (keyName: string) => string = null): any {\n        if (src === null || typeof src === 'undefined' || typeof src !== 'object') {\n            return src;\n        }\n\n        if (src instanceof Date) {\n            return new Date(src.getTime());\n        }\n\n        if (src instanceof RegExp) {\n            return new RegExp(src);\n        }\n\n        if (src instanceof Array) {\n            return src.map((item: any) => Util.clone(item, renamePropertyName));\n        }\n\n        if (src instanceof Object) {\n            const objCopy: {[key: string]: any} = {};\n\n            Object.keys(src)\n                .forEach((keyName: string) => {\n                    const name: string = (renamePropertyName !== null) ? renamePropertyName(keyName) : keyName;\n\n                    objCopy[name] = Util.clone(src[keyName], renamePropertyName);\n                });\n\n            return objCopy;\n        }\n\n        throw new Error(`Unable to copy. ${src} isn't supported.`);\n    }\n\n}\n","import {IBaseModel} from './IBaseModel';\nimport {IBaseModelOptions} from './IBaseModelOptions';\nimport {BaseObject} from './BaseObject';\nimport {Util} from './Util';\n\n/**\n *  Base Model is a design pattern used to transfer data between software application subsystems.\n *\n * Note: If the data doesn't match the property names you can set the value manually after update super method has been called.\n *  Also in the class you inherit BaseModel from you can override the update method to handle the data how you want.\n *\n * @class BaseModel\n * @extends BaseObject\n * @param [data] {any} Provide a way to update the base model upon initialization.\n * @param [opts] {{ expand:boolean }} Options for the base model.\n * @requires Extend\n * @requires BaseObject\n * @requires Util\n * @constructor\n * @author Robert S. (www.codeBelt.com)\n * @example\n *      // Example how to extend the BaseModel class.\n *      let data = {\n *              make: 'Tesla',\n *              model: 'Model S',\n *              YeAr: 2014,\n *              feature: {\n *                  abs: true,\n *                  airbags: true\n *              }\n *      }\n *      let carModel = new CarModel(data);\n *\n *\n *      // Example how to extend the BaseModel class.\n *      class CarModel extends BaseModel {\n *\n *          // You need to have properties so the data will get assigned.\n *          // If not the data will not get assigned to the model.\n *          make = null;\n *          model = null;\n *          year = null;\n *          allWheel = false; // Set a default value\n *\n *          // You can assign BaseModel to a property which will\n *          // automatically created it and pass the data to it.\n *          feature = FeatureModel\n *\n *          // If you have an array of data and want them assign to a BaseModel.\n *          feature = [FeatureModel];\n *\n *          constructor(data = {}, opts = {}) {\n *              super(opts);\n *\n *              if (data) {\n *                  this.update(data);\n *              }\n *          }\n *\n *          // @overridden BaseModel.update\n *          update(data) {\n *              super.update(data);\n *\n *              // If the data doesn't match the property name.\n *              // You can set the value(s) manually after the update super method has been called.\n *              this.year = data.YeAr;\n *          }\n *      }\n */\nexport class BaseModel extends BaseObject implements IBaseModel {\n    /**\n     * This property helps distinguish a BaseModel from other functions.\n     *\n     * @property IS_BASE_MODEL\n     * @type {boolean}\n     * @public\n     * @static\n     * @readonly\n     */\n    public static readonly IS_BASE_MODEL: boolean = true;\n\n    /**\n     * @property sjsOptions\n     * @type {IBaseModelOptions}}\n     * @public\n     */\n    protected sjsOptions: IBaseModelOptions = {\n        expand: false,\n    };\n\n    constructor(opts: IBaseModelOptions = {}) {\n        super();\n\n        this.sjsOptions.expand = opts.expand === true;\n    }\n\n    /**\n     * Provide a way to update the  Base Model.\n     *\n     * @method update\n     * @param [data={}] {any}\n     * @public\n     * @example\n     *     // Example of updating some of the data:\n     *     carModel.update({ year: 2015, allWheel: true});\n     *\n     *     // Of course you can also do it the following way:\n     *     carModel.year = 2015;\n     *     carModel.allWheel = false;\n     */\n    public update(data: any = {}): any {\n        const dataToUse: {[propertyName: string]: any} = this._isObject(data)\n            ? data\n            : {};\n\n        Object\n            .keys(this)\n            .forEach((propertyName: string) => {\n                // Ignore the sjsId property because it is set in the BaseObject constructor and we don't want to update it.\n                if (propertyName !== 'sjsId' && propertyName !== 'sjsOptions') {\n                    const currentPropertyData: any = (this as any)[propertyName];\n                    const passedInDataForProperty: any = dataToUse[propertyName];\n\n                    (this as any)[propertyName] = this._getPropertyData(currentPropertyData, passedInDataForProperty);\n                }\n            });\n\n        return this;\n    }\n\n    /**\n     * Converts the Base Model data into a JSON object and deletes the sjsId property.\n     *\n     * @method toJSON\n     * @returns {any}\n     * @public\n     * @example\n     *     const obj = carModel.toJSON();\n     */\n    public toJSON(): any {\n        const clone: any = Util.clone(this);\n\n        return Util.deletePropertyFromObject(clone, ['sjsId', 'sjsOptions']);\n    }\n\n    /**\n     * Converts a  Base Model to a JSON string,\n     *\n     * @method toJSONString\n     * @returns {string}\n     * @public\n     * @example\n     *     const str = carModel.toJSONString();\n     */\n    public toJSONString(): string {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * Converts the string json data into an Object and calls the {{#crossLink \"BaseModel/update:method\"}}{{/crossLink}} method with the converted Object.\n     *\n     * @method fromJSON\n     * @param json {string}\n     * @public\n     * @example\n     *      const str = '{\"make\":\"Tesla\",\"model\":\"Model S\",\"year\":2014}'\n     *      const carModel = new CarModel();\n     *      carModel.fromJSON(str);\n     */\n    public fromJSON(json: string): any {\n        const parsedData: any = JSON.parse(json);\n\n        this.update(parsedData);\n\n        return this;\n    }\n\n    /**\n     * Create a clone/copy of the  Base Model.\n     *\n     * @method clone\n     * @returns {BaseModel}\n     * @public\n     * @example\n     *     const clone = carModel.clone();\n     */\n    public clone(): BaseModel {\n        const clonedBaseModel: BaseModel = new (this as any).constructor(this);\n\n        return clonedBaseModel;\n    }\n\n    /**\n     * Adds the updateData to the property\n     *\n     * @method _getPropertyData\n     * @param propertyName\n     * @param updateData\n     * @protected\n     */\n    protected _getPropertyData(currentPropertyData: any, passedInDataForProperty: any): any {\n        if (Array.isArray(currentPropertyData) === true) {\n            const fistItemInArray: any = currentPropertyData[0];\n            const isBaseModelObject: boolean = this._isBaseModelObject(fistItemInArray);\n            const isBaseModelClass: boolean = this._isBaseModelClass(fistItemInArray);\n\n            if (Array.isArray(passedInDataForProperty) === false && isBaseModelClass === true) {\n                return [];\n            }\n\n            if (Array.isArray(passedInDataForProperty) === false) {\n                return currentPropertyData;\n            }\n\n            if (isBaseModelClass === true) {\n                return passedInDataForProperty.map((json: object) => new fistItemInArray(json, this.sjsOptions));\n            }\n\n            if (isBaseModelObject === true) {\n                return passedInDataForProperty.map((json: object) => new (fistItemInArray as any).constructor(json, this.sjsOptions));\n            }\n\n            return passedInDataForProperty;\n        }\n\n        return (passedInDataForProperty == null)\n            ? this._updateData(currentPropertyData, null)\n            : this._updateData(currentPropertyData, passedInDataForProperty);\n    }\n\n    /**\n     * @method _updateData\n     * @param currentPropertyData\n     * @param passedInDataForProperty\n     * @protected\n     */\n    protected _updateData(currentPropertyData: any, passedInDataForProperty: any): any {\n        const isBaseModelObject: boolean = this._isBaseModelObject(currentPropertyData);\n        const isBaseModelClass: boolean = this._isBaseModelClass(currentPropertyData);\n        const isPassedInDataAnObjectWithProperties: boolean = passedInDataForProperty != null\n            && typeof passedInDataForProperty === 'object'\n            && Object.keys(passedInDataForProperty).length > 0;\n\n        if (isBaseModelObject === true && isPassedInDataAnObjectWithProperties === true) {\n            // Call the update method on th BaseModel object and give it the passed in data.\n            const baseModel: BaseModel = currentPropertyData;\n\n            baseModel.update(passedInDataForProperty);\n\n            return baseModel;\n        }\n\n        if (isBaseModelClass === true && (isPassedInDataAnObjectWithProperties === true || this.sjsOptions.expand === true)) {\n            // If data is passed in or the expand option is set to true then create the BaseModel.\n            // Give the constructor the passed in data or an empty object if the expand is true.\n            const obj: object = isPassedInDataAnObjectWithProperties\n                ? passedInDataForProperty\n                : {};\n\n            return new currentPropertyData(obj, this.sjsOptions);\n        } else if (isBaseModelClass === true) {\n            // Don't create the BaseModel if there is no data passed in. Return null to be assigned to the property.\n            return null;\n        }\n\n        // If there is no data passed in then return the data that is currently on the property so it stays the same.\n        return (passedInDataForProperty != null)\n            ? passedInDataForProperty\n            : currentPropertyData;\n    }\n\n    /**\n     * Check the currentPropertyData to see if it is a BaseModel Class and not instantiated.\n     *\n     * @method _isBaseModelClass\n     * @param currentPropertyData\n     * @returns {boolean}\n     * @protected\n     */\n    protected _isBaseModelClass(currentPropertyData: any): boolean {\n        return typeof currentPropertyData === 'function' && currentPropertyData.IS_BASE_MODEL === true;\n    }\n\n    /**\n     * Check the currentPropertyData to see if it is an instantiated version of the BaseModel.\n     *\n     * @method _isBaseModelObject\n     * @param currentPropertyData\n     * @returns {boolean}\n     * @protected\n     */\n    protected _isBaseModelObject(currentPropertyData: any): boolean {\n        return currentPropertyData instanceof BaseModel;\n    }\n\n    /**\n     * Check if the data is an object.\n     *\n     * @method _isObject\n     * @param data\n     * @returns {boolean}\n     * @protected\n     */\n    protected _isObject(data: any): boolean {\n        const isObject: boolean = Boolean(data)\n            && Array.isArray(data) === false\n            && typeof data === 'object';\n\n        if (isObject === false) {\n            console.error(`Something is wrong! ${this.getClassName()} only allows Objects but \"${data}\" was passed in.`);\n        }\n\n        return isObject;\n    }\n\n}\n","import {Util} from './Util';\n\n/**\n * The {{#crossLink \"BaseObject\"}}{{/crossLink}} class is an abstract class that provides common properties and functionality for all StructureJS classes.\n *\n * @class BaseObject\n * @requires Util\n * @constructor\n * @author Robert S. (www.codeBelt.com)\n */\nexport class BaseObject {\n\n    /**\n     * The sjsId (StructureJS ID) is a unique identifier automatically assigned to most StructureJS objects upon instantiation.\n     *\n     * @property sjsId\n     * @type {int}\n     * @default null\n     * @writeOnce\n     * @readOnly\n     * @public\n     */\n    public sjsId: number = null;\n\n    constructor() {\n        this.sjsId = Util.uniqueId();\n    }\n\n    /**\n     * The purpose of the destroy method is to make an object ready for garbage collection. This\n     * should be thought of as a one way function. Once destroy is called no further methods should be\n     * called on the object or properties accessed. It is the responsibility of those who implement this\n     * function to stop all running Timers, all running Sounds, and take any other steps necessary to make an\n     * object eligible for garbage collection.\n     *\n     * By default the destroy method will null out all properties of the class automatically. You should call destroy\n     * on other objects before calling the super.\n     *\n     * @method destroy\n     * @return {void}\n     * @public\n     * @example\n     *     destroy() {\n     *          this.disable();\n     *\n     *          this._childInstance.destroy();\n     *\n     *          super.destroy();\n     *     }\n     */\n    public destroy(): void {\n        Object.keys(this)\n            .filter((propertyName: string) => propertyName !== 'sjsId')\n            .forEach((propertyName: string) => (this as any)[propertyName] = null);\n    }\n\n    /**\n     * Gets the class/model.\n     *\n     * @method getClassName\n     * @returns {string}\n     * @public\n     */\n    public getClassName(): string {\n        return (this as any).constructor.name;\n    }\n\n}\n"],"names":["Util","prefix","id","_idCounter","String","object","value","propertyNameList","Array","Object","keys","forEach","key","propertyData","includes","item","deletePropertyFromObject","src","renamePropertyName","Date","getTime","RegExp","map","clone","objCopy_1","keyName","name","Error","opts","_super","_this","expand","sjsOptions","tslib_1.__extends","BaseModel","data","dataToUse","this","_isObject","propertyName","currentPropertyData","passedInDataForProperty","_getPropertyData","JSON","stringify","toJSON","json","parsedData","parse","update","constructor","isArray","fistItemInArray_1","isBaseModelObject","_isBaseModelObject","isBaseModelClass","_isBaseModelClass","_updateData","isPassedInDataAnObjectWithProperties","length","baseModel","IS_BASE_MODEL","isObject","Boolean","console","error","getClassName","sjsId","uniqueId","BaseObject","filter"],"mappings":"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"}